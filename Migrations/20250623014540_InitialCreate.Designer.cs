// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Smart_Home_IoT_Device_Management_API.Infrastructure.Persistence;

#nullable disable

namespace Smart_Home_IoT_Device_Management_API.Migrations
{
    [DbContext(typeof(SmartHomeContext))]
    [Migration("20250623014540_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Smart_Home_IoT_Device_Management_API.Domain.Entities.Device", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DeviceCategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("InstalledAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastCommunicationAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastUsedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<string>("MACAddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<float?>("PowerConsumption")
                        .HasPrecision(10, 2)
                        .HasColumnType("real");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("UsageCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DeviceCategoryId");

                    b.HasIndex("LocationId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("Smart_Home_IoT_Device_Management_API.Domain.Entities.DeviceCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CommunicationProtocol")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int?>("DeviceType")
                        .HasColumnType("integer");

                    b.Property<string>("FirmwareVersion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PowerSource")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("RequiresInternet")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("DeviceCategories");
                });

            modelBuilder.Entity("Smart_Home_IoT_Device_Management_API.Domain.Entities.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int?>("FloorNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("RoomId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Smart_Home_IoT_Device_Management_API.Domain.Entities.SensorData", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int?>("AirQualityIndex")
                        .HasColumnType("integer");

                    b.Property<int?>("BatteryLevel")
                        .HasColumnType("integer");

                    b.Property<float?>("CO2Level")
                        .HasPrecision(6, 2)
                        .HasColumnType("real");

                    b.Property<float?>("Current")
                        .HasPrecision(10, 2)
                        .HasColumnType("real");

                    b.Property<float?>("Humidity")
                        .HasPrecision(5, 2)
                        .HasColumnType("real");

                    b.Property<float?>("LightLevel")
                        .HasPrecision(6, 2)
                        .HasColumnType("real");

                    b.Property<bool?>("MotionDetected")
                        .HasColumnType("boolean");

                    b.Property<float?>("PowerConsumptionWatts")
                        .HasPrecision(10, 2)
                        .HasColumnType("real");

                    b.Property<float?>("Pressure")
                        .HasPrecision(6, 2)
                        .HasColumnType("real");

                    b.Property<DateTime>("RecordedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float?>("SignalStrengthDb")
                        .HasPrecision(6, 2)
                        .HasColumnType("real");

                    b.Property<float?>("SoundLevel")
                        .HasPrecision(6, 2)
                        .HasColumnType("real");

                    b.Property<float?>("Temperature")
                        .HasPrecision(5, 2)
                        .HasColumnType("real");

                    b.Property<long?>("UptimeSeconds")
                        .HasColumnType("bigint");

                    b.Property<float?>("Voltage")
                        .HasPrecision(10, 2)
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("SensorDatas");
                });

            modelBuilder.Entity("Smart_Home_IoT_Device_Management_API.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("FullName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Smart_Home_IoT_Device_Management_API.Domain.Entities.UserAndDevicePermission.UserDevicePermission", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Permission")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId", "DeviceId");

                    b.HasIndex("DeviceId");

                    b.ToTable("UserDevicePermissions");
                });

            modelBuilder.Entity("Smart_Home_IoT_Device_Management_API.Domain.Entities.Device", b =>
                {
                    b.HasOne("Smart_Home_IoT_Device_Management_API.Domain.Entities.DeviceCategory", "DeviceCategory")
                        .WithMany("Devices")
                        .HasForeignKey("DeviceCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Smart_Home_IoT_Device_Management_API.Domain.Entities.Location", "Location")
                        .WithMany("Devices")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Smart_Home_IoT_Device_Management_API.Domain.Entities.Owned.DeviceSetting", "DeviceSetting", b1 =>
                        {
                            b1.Property<Guid>("DeviceId")
                                .HasColumnType("uuid");

                            b1.Property<bool?>("AutoShutdown")
                                .HasColumnType("boolean");

                            b1.Property<int?>("Brightness")
                                .HasColumnType("integer");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<int?>("MotionSensitivity")
                                .HasColumnType("integer");

                            b1.Property<int?>("TemperatureThreshold")
                                .HasColumnType("integer");

                            b1.Property<int?>("UpdateIntervalSeconds")
                                .HasColumnType("integer");

                            b1.Property<int?>("Volume")
                                .HasColumnType("integer");

                            b1.HasKey("DeviceId");

                            b1.ToTable("Devices");

                            b1.WithOwner()
                                .HasForeignKey("DeviceId");
                        });

                    b.Navigation("DeviceCategory");

                    b.Navigation("DeviceSetting")
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Smart_Home_IoT_Device_Management_API.Domain.Entities.SensorData", b =>
                {
                    b.HasOne("Smart_Home_IoT_Device_Management_API.Domain.Entities.Device", "Device")
                        .WithOne("SensorData")
                        .HasForeignKey("Smart_Home_IoT_Device_Management_API.Domain.Entities.SensorData", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("Smart_Home_IoT_Device_Management_API.Domain.Entities.UserAndDevicePermission.UserDevicePermission", b =>
                {
                    b.HasOne("Smart_Home_IoT_Device_Management_API.Domain.Entities.Device", "Device")
                        .WithMany("UserDevicePermissions")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Smart_Home_IoT_Device_Management_API.Domain.Entities.User", "User")
                        .WithMany("UserDevicePermissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Smart_Home_IoT_Device_Management_API.Domain.Entities.Device", b =>
                {
                    b.Navigation("SensorData")
                        .IsRequired();

                    b.Navigation("UserDevicePermissions");
                });

            modelBuilder.Entity("Smart_Home_IoT_Device_Management_API.Domain.Entities.DeviceCategory", b =>
                {
                    b.Navigation("Devices");
                });

            modelBuilder.Entity("Smart_Home_IoT_Device_Management_API.Domain.Entities.Location", b =>
                {
                    b.Navigation("Devices");
                });

            modelBuilder.Entity("Smart_Home_IoT_Device_Management_API.Domain.Entities.User", b =>
                {
                    b.Navigation("UserDevicePermissions");
                });
#pragma warning restore 612, 618
        }
    }
}
